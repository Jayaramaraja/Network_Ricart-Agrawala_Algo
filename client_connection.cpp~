#include "connection.h"
using namespace std;
#define TRUE 1
int main(int argc, char *argv[])
{	
	int opt = 1;

int so_broadcast;
so_broadcast = TRUE;
	char *serverIp = argv[1]; //other client ip
	int port = 2408; 
    	//create a message buffer 
    	char msg[1500];
	//setup a socket and connection tools 
	struct hostent* host = gethostbyname(serverIp); 
	sockaddr_in sendSockAddr;   
	bzero((char*)&sendSockAddr, sizeof(sendSockAddr)); 
	sendSockAddr.sin_family = AF_INET; 
	sendSockAddr.sin_port=0;
	sendSockAddr.sin_addr.s_addr =inet_addr(serverIp);//inet_addr(inet_ntoa(*(struct in_addr*)*host->h_addr_list));

if (sendSockAddr.sin_addr.s_addr==INADDR_NONE) 
{
cout<<"not a valid address to send.."<<endl;
exit(1);
}

	char* myIP=inet_ntoa(*(struct in_addr*)*host->h_addr_list);
	cout<<"my socket ip addr "<<myIP<<endl;
	sendSockAddr.sin_port = htons(port);
	int clientSd = socket(AF_INET, SOCK_STREAM, 0);
	//try to connect...
    if( setsockopt(clientSd, SOL_SOCKET, SO_BROADCAST,(char *)&opt,sizeof(opt)) < 0 )   
    {   
        cout<<"setsockopt";   
          
    } 
	int status = connect(clientSd,(sockaddr*) &sendSockAddr, sizeof(sendSockAddr));
	if(status < 0)
	{
		cout<<"Error connecting to socket!"<<endl; 
		//setup a socket and connection tools
		sockaddr_in servAddr;
		bzero((char*)&servAddr, sizeof(servAddr));
		servAddr.sin_family = AF_INET;
		servAddr.sin_addr.s_addr = htonl(INADDR_ANY);
		servAddr.sin_port = htons(port);

		//open stream oriented socket with internet address
		//also keep track of the socket descriptor
		int serverSd = socket(AF_INET, SOCK_STREAM, 0);
		if(serverSd < 0)
		{
		cerr << "Error establishing the server socket" << endl;
		exit(0);
		}
		//bind the socket to its local address
		int bindStatus = bind(serverSd, (struct sockaddr*) &servAddr, 
		sizeof(servAddr));
		if(bindStatus < 0)
		{
		cerr << "Error binding socket to local address" << endl;
		exit(0);
		}
		cout << "Waiting for a client to connect..." << endl;
		//listen for up to 5 requests at a time
		listen(serverSd, 5);
		//receive a request from client using accept
		//we need a new address to connect with the client
		sockaddr_in newSockAddr;
		socklen_t newSockAddrSize = sizeof(newSockAddr);
		//accept, create a new socket descriptor to 
		//handle the new connection with client
		int newSd = accept(serverSd, (sockaddr *)&newSockAddr, &newSockAddrSize);
		if(newSd < 0)
		{
		cerr << "Error accepting request from client!" << endl;
		exit(1);
		}
		cout << "Connected with client!" << endl;

	}
	cout << "Connected to the other client" << endl;
	return 0;
}
